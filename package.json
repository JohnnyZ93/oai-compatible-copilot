{
	"name": "oai-compatible-copilot",
	"publisher": "johnny-zhao",
	"displayName": "OAI Compatible Provider for Copilot",
	"description": "An extension that integrates Openai Compatible Inference Providers into GitHub Copilot Chat",
	"icon": "assets/logo.png",
	"repository": {
		"type": "git",
		"url": "https://github.com/JohnnyZ93/oai-compatible-copilot"
	},
	"version": "0.0.2",
	"engines": {
		"vscode": "^1.104.0"
	},
	"categories": [
		"AI",
		"Chat"
	],
	"badges": [
		{
			"url": "https://img.shields.io/github/stars/JohnnyZ93/oai-compatible-copilot?style=social",
			"description": "Star oai-compatible-copilot on Github",
			"href": "https://github.com/JohnnyZ93/oai-compatible-copilot"
		}
	],
	"bugs": {
		"url": "https://github.com/JohnnyZ93/oai-compatible-copilot/issues"
	},
	"license": "MIT",
	"contributes": {
		"languageModelChatProviders": [
			{
				"vendor": "oaicopilot",
				"displayName": "OAI Compatible",
				"managementCommand": "oaicopilot.setApikey"
			}
		],
		"commands": [
			{
				"command": "oaicopilot.setApikey",
				"title": "Set OAI Compatible Apikey"
			}
		],
		"configuration": {
			"title": "OAI Compatible Copilot",
			"properties": {
				"oaicopilot.baseUrl": {
					"type": "string",
					"default": "https://router.huggingface.co/v1",
					"description": "The base URL for the Openai Compatible Inference API. Default value is Hugging Face."
				},
				"oaicopilot.models": {
					"type": "array",
					"default": [],
					"items": {
						"type": "object",
						"properties": {
							"id": {
								"type": "string",
								"description": "Model ID"
							},
							"owned_by": {
								"type": "string",
								"description": "Model provider"
							},
							"context_length": {
								"type": "number",
								"default": 128000,
								"minimum": 1000,
								"maximum": 10000000,
								"description": "Model support context length. Default is 128000."
							},
							"vision": {
								"type": "boolean",
								"default": false,
								"description": "Model support vision. Default is false."
							},
							"max_tokens": {
								"type": "number",
								"default": 4096,
								"minimum": 1,
								"maximum": 10000000,
								"description": "Maximum number of tokens to generate (range: [1, context_length)). Default is 4096."
							},
							"enable_thinking": {
								"type": "boolean",
								"default": false,
								"description": "Switches between thinking and non-thinking modes. Default is false."
							},
							"temperature": {
								"type": "number",
								"default": 0,
								"minimum": 0,
								"maximum": 2,
								"description": "Sampling temperature (range: [0, 2]). Lower values make output more deterministic, higher values make it more creative. Default is 0."
							},
							"top_p": {
								"type": "number",
								"default": 1,
								"minimum": 0,
								"maximum": 1,
								"description": "Top-p sampling value (range: (0, 1]). Default is 1."
							},
							"top_k": {
								"type": "number",
								"default": 50,
								"minimum": 1,
								"description": "Top-k sampling value (range: [1, Infinity)). Not required."
							},
							"min_p": {
								"type": "number",
								"default": 0,
								"minimum": 0,
								"maximum": 1,
								"description": "Minimum probability threshold (range: [0, 1]). Not required."
							},
							"frequency_penalty": {
								"type": "number",
								"default": 0,
								"minimum": -2,
								"maximum": 2,
								"description": "Frequency penalty (range: [-2, 2]). Not required."
							},
							"presence_penalty": {
								"type": "number",
								"default": 0,
								"minimum": -2,
								"maximum": 2,
								"description": "Presence penalty (range: [-2, 2]). Not required."
							},
							"repetition_penalty": {
								"type": "number",
								"default": 0,
								"minimum": 0,
								"maximum": 2,
								"description": "Repetition penalty (range: (0, 2]). Not required."
							}
						},
						"required": [
							"id",
							"owned_by"
						]
					},
					"description": "A list of preferred models to use. If provided, these models will be used directly instead of fetching from the API."
				}
			}
		}
	},
	"main": "./out/extension.js",
	"scripts": {
		"vscode:prepublish": "npm run compile",
		"download-api": "dts dev",
		"compile": "tsc -p ./",
		"lint": "eslint",
		"format": "prettier --write .",
		"watch": "tsc -watch -p ./",
		"test": "pnpm run compile && vscode-test"
	},
	"dependencies": {},
	"devDependencies": {
		"@eslint/js": "^9.13.0",
		"@stylistic/eslint-plugin": "^2.9.0",
		"@types/node": "^22",
		"@types/mocha": "^10.0.6",
		"@vscode/dts": "^0.4.1",
		"@types/vscode": "^1.104.0",
		"@vscode/test-cli": "^0.0.11",
		"@vscode/test-electron": "^2.5.2",
		"eslint": "^9.13.0",
		"prettier": "^3.1.0",
		"typescript": "^5.9.2",
		"typescript-eslint": "^8.39.0"
	}
}